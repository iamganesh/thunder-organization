[{"C:\\Users\\kgane\\Documents\\GitHub\\thunder-web\\src\\index.tsx":"1","C:\\Users\\kgane\\Documents\\GitHub\\thunder-web\\src\\reportWebVitals.ts":"2","C:\\Users\\kgane\\Documents\\GitHub\\thunder-web\\src\\App.tsx":"3","C:\\Users\\kgane\\Documents\\GitHub\\thunder-web\\src\\pages\\404NotFound.tsx":"4","C:\\Users\\kgane\\Documents\\GitHub\\thunder-web\\src\\pages\\AllTransactions.tsx":"5","C:\\Users\\kgane\\Documents\\GitHub\\thunder-web\\src\\pages\\Login.tsx":"6","C:\\Users\\kgane\\Documents\\GitHub\\thunder-web\\src\\pages\\Dashboard.tsx":"7","C:\\Users\\kgane\\Documents\\GitHub\\thunder-web\\src\\contexts\\AuthContext.tsx":"8","C:\\Users\\kgane\\Documents\\GitHub\\thunder-web\\src\\pages\\Profile.tsx":"9","C:\\Users\\kgane\\Documents\\GitHub\\thunder-web\\src\\pages\\Register.tsx":"10","C:\\Users\\kgane\\Documents\\GitHub\\thunder-web\\src\\pages\\UserAccounts.tsx":"11","C:\\Users\\kgane\\Documents\\GitHub\\thunder-web\\src\\routers\\PrivateRoute.tsx":"12","C:\\Users\\kgane\\Documents\\GitHub\\thunder-web\\src\\firebase.js":"13","C:\\Users\\kgane\\Documents\\GitHub\\thunder-web\\src\\constants\\Constants.ts":"14","C:\\Users\\kgane\\Documents\\GitHub\\thunder-web\\src\\components\\TopNavigation.tsx":"15","C:\\Users\\kgane\\Documents\\GitHub\\thunder-web\\src\\components\\BModal.tsx":"16"},{"size":556,"mtime":1642606631212,"results":"17","hashOfConfig":"18"},{"size":440,"mtime":1642606631228,"results":"19","hashOfConfig":"18"},{"size":1378,"mtime":1642658173024,"results":"20","hashOfConfig":"18"},{"size":826,"mtime":1642606631212,"results":"21","hashOfConfig":"18"},{"size":3958,"mtime":1642606631212,"results":"22","hashOfConfig":"18"},{"size":12509,"mtime":1642606631212,"results":"23","hashOfConfig":"18"},{"size":17515,"mtime":1642606631212,"results":"24","hashOfConfig":"18"},{"size":839,"mtime":1642606631212,"results":"25","hashOfConfig":"18"},{"size":25825,"mtime":1642606631212,"results":"26","hashOfConfig":"18"},{"size":10420,"mtime":1642606631228,"results":"27","hashOfConfig":"18"},{"size":3806,"mtime":1642606631228,"results":"28","hashOfConfig":"18"},{"size":458,"mtime":1642606631228,"results":"29","hashOfConfig":"18"},{"size":1213,"mtime":1642606631212,"results":"30","hashOfConfig":"18"},{"size":461,"mtime":1642606631212,"results":"31","hashOfConfig":"18"},{"size":2825,"mtime":1642606631212,"results":"32","hashOfConfig":"18"},{"size":842,"mtime":1642606631212,"results":"33","hashOfConfig":"18"},{"filePath":"34","messages":"35","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},"armwfo",{"filePath":"37","messages":"38","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"39","messages":"40","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"41","messages":"42","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"45","usedDeprecatedRules":"36"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":11,"fixableErrorCount":0,"fixableWarningCount":0,"source":"48","usedDeprecatedRules":"36"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"51","usedDeprecatedRules":"36"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"54","messages":"55","errorCount":0,"warningCount":20,"fixableErrorCount":0,"fixableWarningCount":0,"source":"56","usedDeprecatedRules":"36"},{"filePath":"57","messages":"58","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"59","usedDeprecatedRules":"36"},{"filePath":"60","messages":"61","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"62","usedDeprecatedRules":"36"},{"filePath":"63","messages":"64","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"65","messages":"66","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"67"},{"filePath":"68","messages":"69","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"70","messages":"71","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"72","usedDeprecatedRules":"36"},{"filePath":"73","messages":"74","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"75","usedDeprecatedRules":"76"},"C:\\Users\\kgane\\Documents\\GitHub\\thunder-web\\src\\index.tsx",[],["77","78"],"C:\\Users\\kgane\\Documents\\GitHub\\thunder-web\\src\\reportWebVitals.ts",[],"C:\\Users\\kgane\\Documents\\GitHub\\thunder-web\\src\\App.tsx",[],"C:\\Users\\kgane\\Documents\\GitHub\\thunder-web\\src\\pages\\404NotFound.tsx",[],"C:\\Users\\kgane\\Documents\\GitHub\\thunder-web\\src\\pages\\AllTransactions.tsx",["79","80"],"import React, { useEffect } from 'react';\r\nimport TopNav from '../components/TopNavigation';\r\nimport $ from 'jquery';\r\nimport moment from 'moment';\r\nimport 'datatables.net';\r\nimport 'datatables.net-dt/css/jquery.dataTables.css';\r\nimport firebase from '../firebase';\r\nimport { Table } from 'react-bootstrap';\r\nimport { ITLog } from '../models/Index';\r\nimport { FB_COL_TRANSACTION_LOGS } from '../constants/Constants';\r\n\r\nconst AllTransactions = () => {\r\n\r\n    useEffect(()=>{\r\n      getTLog();\r\n    },[]);\r\n\r\n    const getTLog = async () =>{\r\n      try{\r\n          const TLog = await firebase.firestore().collection(FB_COL_TRANSACTION_LOGS).orderBy('timestamp',\"desc\").get();\r\n          let transactionLog:any[] = [];\r\n          TLog.forEach((doc)=>{\r\n              let logData = doc.data();\r\n              let logId = doc.id;\r\n              let logObj:ITLog = {\r\n                  docID : logId,\r\n                  name : logData.name,\r\n                  type : logData.type,\r\n                  amount : logData.amount,\r\n                  createdBy : logData.createdBy,\r\n                  createdTime : logData.createdTime,\r\n                  creditType : logData.creditType\r\n              }\r\n              transactionLog.push(logObj);\r\n          });\r\n          initializeTable(\"#transactionTable\",transactionLog)\r\n      }catch(ex){\r\n          console.error(ex);\r\n      }\r\n    }\r\n\r\n    const initializeTable = (id:string,transactions:any[]) => {\r\n      let dataSet:any = [];\r\n      if ( $.fn.dataTable.isDataTable( id ) ) {\r\n        let table = $( id ).DataTable();\r\n        table.destroy();\r\n      }\r\n      transactions.forEach((obj:ITLog)=>{\r\n        dataSet.push([\r\n          obj.createdTime ? moment(obj.createdTime).format(\"DD-MMM-YYYY hh:mm:ss\") : \"\",\r\n          obj.name,\r\n          obj.creditType ? obj.creditType == \"saving\" ? \"deposit\" : obj.creditType : \"withdrawal\",\r\n          obj.type,\r\n          obj.amount\r\n        ]);\r\n      });\r\n      $(id).DataTable({\r\n        order : [], \r\n        // rowReorder: {\r\n        //   selector: 'td:nth-child(2)'\r\n        // },\r\n        responsive: true,\r\n        data: dataSet,\r\n        columns: [\r\n          { title: \"Date\" },\r\n          { title: \"Name\" },\r\n          { title: \"Transaction Type\" },\r\n          { title: \"Type\" },\r\n          { title: \"Amount.\" }\r\n      ]\r\n      });\r\n    }\r\n\r\n    return(\r\n       <div id=\"wrapper\">\r\n        <div id=\"content-wrapper\" className=\"d-flex flex-column\">\r\n            <TopNav></TopNav>\r\n            {/* Begin Page Content */}\r\n            <div className=\"container-fluid\" style={{paddingTop: '4.5rem'}}>\r\n              {/* Page Heading */}\r\n              <div className=\"d-sm-flex align-items-center justify-content-between mb-4\">\r\n                <h1 className=\"h3 mb-0 text-gray-800\">All Transactions</h1>\r\n                {/* <a href=\"#\" className=\"d-none d-sm-inline-block btn btn-sm btn-primary shadow-sm\"><i className=\"fas fa-download fa-sm text-white-50\" /> Generate Report</a> */}\r\n              </div>\r\n              <div className=\"row\">\r\n                {/* Transaction */}\r\n                <div className=\"col-xl-12 col-lg-12\">\r\n                  <div className=\"card shadow mb-4\">\r\n                    {/* Card Header - Dropdown */}\r\n                    <div className=\"card-header py-3 d-flex flex-row align-items-center justify-content-between\">\r\n                      <h6 className=\"m-0 font-weight-bold text-primary\">Transactions</h6>\r\n                    </div>\r\n                    {/* Card Body */}\r\n                    <div className=\"card-body\">\r\n                      <Table responsive id=\"transactionTable\">\r\n                        \r\n                        </Table>\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            </div>\r\n            {/* /.container-fluid */}\r\n        </div>\r\n        {/* End of Content Wrapper */}\r\n      </div>\r\n    );\r\n}\r\n\r\nexport default AllTransactions;","C:\\Users\\kgane\\Documents\\GitHub\\thunder-web\\src\\pages\\Login.tsx",["81","82","83","84","85","86","87","88","89","90","91"],"import React from 'react';\r\nimport \"../styles/Login.css\";\r\nimport Swal from 'sweetalert2';\r\nimport firebase from '../firebase';\r\n\r\nimport avatar from '../assets/avatar_2x.png';\r\nimport icon from '../assets/earth.png';\r\nimport { FB_COL_USERS } from '../constants/Constants';\r\nimport { Link, Redirect } from 'react-router-dom';\r\n\r\ninterface ILoginState {\r\n    email : string\r\n    password : string\r\n    btnDisabled : boolean\r\n    isLoggedIn : boolean\r\n    isMounted : boolean\r\n}\r\n\r\nclass Login extends React.Component<{},ILoginState> {\r\n    constructor(props:any) {\r\n        super(props);\r\n        this.state = {\r\n            email : \"\",\r\n            password : \"\",\r\n            isLoggedIn : false,\r\n            btnDisabled : false,\r\n            isMounted : false\r\n        };\r\n    }\r\n\r\n    componentDidMount(){\r\n        let _this = this;\r\n        firebase.auth().onAuthStateChanged(function(user) {\r\n            if (user && !_this.state.isMounted) {\r\n              // User is signed in.\r\n              _this.setState({isLoggedIn:true});\r\n            } else {\r\n              // No user is signed in.\r\n            }\r\n        });\r\n        this.setState({isMounted : true});\r\n\r\n    }\r\n\r\n    handleInputs = (event:any,input:string) => {\r\n        try{\r\n            if(input == \"email\"){\r\n                this.setState({email:event.target.value});\r\n            }else if(input == \"pass\"){\r\n                this.setState({password:event.target.value})\r\n            }\r\n        }catch(ex){\r\n            console.error(ex);\r\n        }\r\n    }\r\n\r\n    fieldValidation = () => {\r\n        let isValid = true;\r\n        let fields = [\"inputEmailUserName\",\"inputPassword\"];\r\n        let focusField:any, count = 0;\r\n        fields.forEach((field)=>{\r\n            let input:any = document.getElementById(field);\r\n            input.classList.remove(\"border-danger\");\r\n            if(!input.value){\r\n                input.classList.add(\"border-danger\");\r\n                isValid = false;\r\n                if(count === 0){\r\n                    focusField = input;\r\n                    count++;\r\n                }\r\n            }\r\n        });\r\n        if(!isValid){\r\n            focusField.focus();\r\n            this.swtoast(\"warning\", \"Email/Password should be mandatory\")\r\n        }\r\n        return isValid\r\n    }\r\n\r\n    swtoast = (icon:any, title:string) => {\r\n        const Toast = Swal.mixin({\r\n            toast: true,\r\n            position: 'top-end',\r\n            showConfirmButton: false,\r\n            timer: 3000,\r\n            timerProgressBar: true,\r\n            onOpen: (toast) => {\r\n              toast.addEventListener('mouseenter', Swal.stopTimer)\r\n              toast.addEventListener('mouseleave', Swal.resumeTimer)\r\n            }\r\n          })\r\n          \r\n        Toast.fire({\r\n            icon: icon,\r\n            title: title\r\n        });\r\n    }\r\n\r\n    signin = async (event:any) => {\r\n        try{\r\n            event.preventDefault();\r\n            const fieldvalidation = this.fieldValidation();\r\n            if(!fieldvalidation){\r\n                return false;\r\n            }\r\n            this.setState({btnDisabled : true});\r\n            const validationResult:any = await this.validateAccount();\r\n            if(!validationResult.isValid){\r\n                this.setState({btnDisabled : false});\r\n                Swal.fire({\r\n                    icon: 'error',\r\n                    title: validationResult.title,\r\n                    text: validationResult.text,\r\n                    footer: \"<a href='#' title='\"+validationResult.information+\"'>Why do I have this issue?</a>\"\r\n                })\r\n            }else{\r\n                let userDoc = await firebase.firestore().collection(FB_COL_USERS).doc(firebase.auth().currentUser?.uid).get();\r\n                let userData:any = userDoc.data();\r\n                this.setState({btnDisabled : false});\r\n                if(userData.isVerified){\r\n                    //navigation.replace('DrawerNavigatorRoutes');\r\n                    if(userData.isAdmin){\r\n                        firebase.auth().signOut();\r\n                        Swal.fire({\r\n                            icon: 'error',\r\n                            title: 'Access Denied',\r\n                            text: \"Currently admin can't access this site.\",\r\n                            footer: '<a href>Why do I have this issue?</a>'\r\n                          })\r\n                    }else{\r\n                        this.setState({isLoggedIn:true});\r\n                        this.swtoast(\"success\", \"Welcome, \"+firebase.auth().currentUser?.displayName);\r\n                    }\r\n                }else if(userData.isRejected){\r\n                    firebase.auth().signOut();\r\n                    Swal.fire({\r\n                        icon: 'error',\r\n                        title: 'Oops...',\r\n                        text: 'Your id is disabled. Please contact your admin.',\r\n                        footer: '<a href>Why do I have this issue?</a>'\r\n                      })\r\n                }else{\r\n                    firebase.auth().signOut();\r\n                    Swal.fire({\r\n                        icon: 'error',\r\n                        title: 'Oops...',\r\n                        text: 'Please contact your admin to get approval of your account.',\r\n                        footer: '<a href>Why do I have this issue?</a>'\r\n                      })\r\n                }\r\n            }\r\n        }catch(ex){\r\n            this.setState({btnDisabled : false});\r\n            console.error(ex);\r\n        }\r\n    }\r\n\r\n    forgotPassword = (e:any) => {\r\n        e.preventDefault();\r\n        (Swal as any).queue([{\r\n        title: 'Reset Password',\r\n        confirmButtonText: 'Confirm',\r\n        showCancelButton: true,\r\n        input: 'text',\r\n        inputValidator: async (value:any) => {\r\n            if (!value) {\r\n              return 'You need to write something!'\r\n            }else{\r\n              let isValid = false;\r\n              (Swal as any).enableLoading();\r\n              let text = \"\";\r\n              isValid = await new Promise((resolve) => {\r\n                firebase.auth().sendPasswordResetEmail(value).then(()=>{\r\n                    resolve(true);\r\n                }).catch((error)=>{\r\n                    if(error.code == \"auth/invalid-email\"){\r\n                        text = \"Please enter a valid email\";\r\n                        resolve(false);\r\n                    }else if(error.code == \"auth/user-not-found\"){\r\n                        text = \"Please register your account first\";\r\n                        resolve(false);\r\n                    }else{\r\n                        text = \"Something went wrong, try again\";\r\n                        resolve(false);\r\n                    }\r\n                })\r\n              });\r\n              (Swal as any).disableLoading();\r\n              if(!isValid){\r\n                  return text;\r\n              }\r\n            }\r\n        },\r\n        text: 'Please type your registered mail id',\r\n        showLoaderOnConfirm: true,\r\n        preConfirm: async (data:any) => {\r\n            Swal.fire({\r\n                icon: 'success',\r\n                html: 'Please check your mail to reset your password',\r\n                footer: \"<a href='#' style='color:red'>Don't share your password to anyone</a>\"\r\n              })\r\n          }\r\n        }])\r\n    }\r\n\r\n    validateAccount = () => {\r\n        let obj = {isValid:false,title:\"Oops...\",text:\"This account is not registered\",buttontext:\"Register\",information:\"Your account is not registered. Please click the Register link to sign in\"};\r\n        return new Promise((resolve) => {\r\n            firebase.auth().signInWithEmailAndPassword(this.state.email,this.state.password).then(()=>{\r\n                obj = {isValid:true,title:\"Success\",text:\"Login success\",buttontext:\"\",information:\"\"};\r\n                resolve(obj);\r\n            }).catch((error) => {\r\n                if(error.code == \"auth/user-not-found\"){\r\n                    resolve(obj);\r\n                }else if(error.code == \"auth/invalid-email\"){\r\n                    obj = {isValid:false,title:\"Oops...\",text:\"Please enter a valid email\",buttontext:\"Forgot password\",information:\"Your email id is Incorrect. Please check the email\"};\r\n                    resolve(obj);\r\n                }else if(error.code == \"auth/wrong-password\"){\r\n                    obj = {isValid:false,title:\"Oops...\",text:\"The password is incorrect\",buttontext:\"Forgot password\",information:\"Your account password is Incorrect. Please click the Forgot the password link to change password\"};\r\n                    resolve(obj);\r\n                }else if(error.code == \"auth/user-disabled\"){\r\n                    obj = {isValid:false,title:\"Oops...\",text:\"Your account is disabled\",buttontext:\"Forgot password\",information:\"Please contact your admin to open your account\"};\r\n                    resolve(obj);\r\n                }else if(error.code == \"auth/too-many-requests\"){\r\n                    obj = {isValid:false,title:\"Oops...\",text:\"Too many attempts\",buttontext:\"Forgot password\",information:\"Please try again later\"};\r\n                    resolve(obj);\r\n                }else{\r\n                    obj = {isValid:false,title:\"Oops...\",text:\"Something went wrong\",buttontext:\"Forgot password\",information:\"Try again later\"};\r\n                    resolve(obj);\r\n                }\r\n            });\r\n        });\r\n    }\r\n\r\n    render(){\r\n        const {email, password} = this.state;\r\n        return(\r\n            <div style={{textAlign:\"center\"}}>\r\n             <div className=\"sidenav\">\r\n                <div className=\"login-main-text\">\r\n                    <img src={icon}/>\r\n                    <h2>Thunder Organization</h2>\r\n                    <p>Login or register from here to access.</p>\r\n                </div>\r\n            </div>\r\n            <div className=\"main login-main\">\r\n              <div className=\"col-md-6 col-sm-12 login-container\">\r\n                <div className=\"card card-container\">\r\n                    {/*</div><img className=\"profile-img-card\" src=\"//lh3.googleusercontent.com/-6V8xOA6M7BA/AAAAAAAAAAI/AAAAAAAAAAA/rzlHcD0KYwo/photo.jpg?sz=120\" alt=\"\" /> */}\r\n                    <img id=\"profile-img\" className=\"profile-img-card\" alt=\"profile-img\" src={avatar}/>\r\n                    <p id=\"profile-name\" className=\"profile-name-card\"></p>\r\n                    <form className=\"form-signin\">\r\n                        <span id=\"reauth-email\" className=\"reauth-email\"></span>\r\n                        <input type=\"email\" id=\"inputEmailUserName\" className=\"form-control\" placeholder=\"Email address\" onChange={(e)=>{this.handleInputs(e,\"email\")}} value={email}/>\r\n                        <input type=\"password\" id=\"inputPassword\" className=\"form-control\" placeholder=\"Password\" onChange={(e)=>{this.handleInputs(e,\"pass\")}} value={password}/>\r\n                        <div id=\"remember\" className=\"checkbox\">\r\n                            <label>\r\n                                <input type=\"checkbox\" value=\"remember-me\"/> Remember me\r\n                            </label>\r\n                        </div>\r\n                        {\r\n                            this.state.btnDisabled ? <button className=\"btn btn-lg btn-primary btn-block btn-signin\" type=\"button\" disabled>\r\n                            <span className=\"spinner-border spinner-border-sm\" role=\"status\" aria-hidden=\"true\"></span>\r\n                            Signing...\r\n                            </button> : <button className=\"btn btn-lg btn-primary btn-block btn-signin\" type=\"submit\" onClick={this.signin.bind(this)} disabled={this.state.btnDisabled}>Sign in</button>\r\n                        } \r\n                    </form>\r\n                    {/* <a href=\"#\" className=\"Register-account\" onClick={this.skipSignIn.bind(this)}>\r\n                       Skip Login\r\n                    </a> */}\r\n                    <a href=\"#\" className=\"forgot-password\" onClick={(e)=>{this.forgotPassword(e)}}>\r\n                        Forgot the password? Reset\r\n                    </a>\r\n                    <Link to=\"/registration\" className=\"Register-account\" >\r\n                        New Here? Register\r\n                    </Link>\r\n\r\n                    {/* <Link to=\"/registration\" className=\"Register-account\">New user? Register</Link> */}\r\n                  </div>\r\n                </div>\r\n            </div>\r\n            {(this.state.isLoggedIn) ? <Redirect to={{pathname:\"/\"}} push></Redirect> : null}\r\n        </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Login;","C:\\Users\\kgane\\Documents\\GitHub\\thunder-web\\src\\pages\\Dashboard.tsx",["92","93","94","95"],"import React, { useEffect, useState } from 'react';\r\nimport { \r\n    FB_COL_ACCOUNTS,\r\n    FB_COL_TRANSACTION_LOGS,\r\n    FB_COL_USERS,\r\n    FB_COL_USER_ACCOUNTS,\r\n    FB_DOC_ACCOUNT\r\n} from '../constants/Constants';\r\nimport firebase from '../firebase';\r\nimport { Pie } from 'react-chartjs-2';\r\nimport TopNav from '../components/TopNavigation';\r\nimport { Table } from 'react-bootstrap';\r\nimport $ from 'jquery';\r\nimport moment from 'moment';\r\nimport 'datatables.net';\r\nimport 'datatables.net-dt/css/jquery.dataTables.css';\r\n\r\nimport \"../styles/Dashboard.css\";\r\nimport \"../styles/font-awesome.css\";\r\nimport \"../styles/nunito-font.css\";\r\nimport { useAuth } from '../contexts/AuthContext';\r\nimport { IAccount, ITLog } from '../models/Index';\r\n\r\nconst data = {\r\n  labels: ['Remaining', 'Withdrawal', 'Interest'],\r\n  datasets: [\r\n    {\r\n      label: '',\r\n      data: [0, 0, 0],\r\n      backgroundColor: [\r\n        '#D4AC0D',\r\n        '#E74C3C',\r\n        '#27AE60',\r\n      ],\r\n      borderWidth: 1,\r\n    }\r\n  ]\r\n}\r\n\r\n//import \"../styles/nucleo-icons.css\";\r\nconst Dashboard = () => {\r\n\r\n    const [accountData, setAccountData] = useState<any>();\r\n    const [transactionLog, setTransactionLog] = useState<any>();\r\n    const [currentUserData, setCurrentUserData] = useState<any>();\r\n    const [currentUserAccount, setCurrentUserAccount] = useState<any>();\r\n    const [chartData, setChartData] = useState(data);\r\n\r\n    const { currentUser }:any = useAuth();\r\n\r\n    useEffect(()=>{\r\n      window.scrollTo(0, 0);\r\n        loadDetails();\r\n    },[]);\r\n\r\n    const initializeTable = (id:string,transactions:any[]) => {\r\n      let dataSet:any = [];\r\n      if ( $.fn.dataTable.isDataTable( id ) ) {\r\n        let table = $( id ).DataTable();\r\n        table.destroy();\r\n      }\r\n      transactions.forEach((obj:ITLog)=>{\r\n        dataSet.push([\r\n          obj.createdTime ? moment(obj.createdTime).format(\"DD-MMM-YYYY hh:mm:ss\") : \"\",\r\n          obj.name,\r\n          obj.creditType ? obj.creditType == \"saving\" ? \"deposit\" : obj.creditType : \"withdrawal\",\r\n          obj.type,\r\n          obj.amount\r\n        ]);\r\n      });\r\n      $(id).DataTable({\r\n        pageLength : 5,\r\n        lengthMenu : [5,10],\r\n        order : [], \r\n        // rowReorder: {\r\n        //   selector: 'td:nth-child(2)'\r\n        // },\r\n        responsive: true,\r\n        data: dataSet,\r\n        columns: [\r\n          { title: \"Date\" },\r\n          { title: \"Name\" },\r\n          { title: \"Transaction Type\" },\r\n          { title: \"Type\" },\r\n          { title: \"Amount.\" }\r\n      ]\r\n      });\r\n    }\r\n\r\n    const loadDetails = async () =>{\r\n        try{\r\n            const userDoc = await firebase.firestore().collection(FB_COL_USERS).doc(currentUser?.uid).get();\r\n            const userData:any = userDoc.data();\r\n            const currentUserDoc = await firebase.firestore().collection(FB_COL_USER_ACCOUNTS).doc(userData.linkId).get();\r\n            const currentUserAccount = currentUserDoc.data();\r\n            const accountDoc = await firebase.firestore().collection(FB_COL_ACCOUNTS).doc(FB_DOC_ACCOUNT).get();//(\"IsActive\",\"==\",true).get().then(function(querySnapshot) {\r\n            let docData:any = accountDoc.data();\r\n            let accountData:IAccount = {\r\n                TotalAmount : docData.TotalAmount,\r\n                RemainingAmount : docData.RemainingAmount,\r\n                TotalInterest : docData.TotalInterest,\r\n                WithdrawalAmount : docData.WithdrawalAmount,\r\n                MinimumBalance : docData.MinimumBalance\r\n            };\r\n            const TLog = await firebase.firestore().collection(FB_COL_TRANSACTION_LOGS).orderBy('timestamp',\"desc\").limit(10).get();\r\n            let transactionLog:any[] = [];\r\n            TLog.forEach((doc)=>{\r\n                let logData = doc.data();\r\n                let logId = doc.id;\r\n                let logObj:ITLog = {\r\n                    docID : logId,\r\n                    name : logData.name,\r\n                    type : logData.type,\r\n                    amount : logData.amount,\r\n                    createdBy : logData.createdBy,\r\n                    createdTime : logData.createdTime,\r\n                    creditType : logData.creditType\r\n                }\r\n                transactionLog.push(logObj);\r\n            });\r\n            let cData = chartData;\r\n            cData.datasets = [\r\n              {\r\n                label: '',\r\n                data: [accountData.RemainingAmount, accountData.WithdrawalAmount as any, accountData.TotalInterest],\r\n                backgroundColor: [\r\n                  '#D4AC0D',\r\n                  '#E74C3C',\r\n                  '#27AE60',\r\n                ],\r\n                borderWidth: 0\r\n              }\r\n            ]\r\n            setChartData(cData);\r\n            setAccountData(accountData);\r\n            setTransactionLog(transactionLog);\r\n            setCurrentUserData(userData);\r\n            setCurrentUserAccount(currentUserAccount);\r\n            initializeTable(\"#top10table\",transactionLog);\r\n        }catch(ex){\r\n            console.error(ex);\r\n        }\r\n    }\r\n\r\n    return(\r\n        <React.Fragment>\r\n       <div id=\"wrapper\">\r\n        <div id=\"content-wrapper\" className=\"d-flex flex-column\">\r\n            <TopNav></TopNav>\r\n            {/* Begin Page Content */}\r\n            <div className=\"container-fluid\" style={{paddingTop: '4.5rem'}}>\r\n              {/* Page Heading */}\r\n              <div className=\"d-sm-flex align-items-center justify-content-between mb-4\">\r\n                <h1 className=\"h3 mb-0 text-gray-800\">Dashboard</h1>\r\n                {/* <a href=\"#\" className=\"d-none d-sm-inline-block btn btn-sm btn-primary shadow-sm\"><i className=\"fas fa-download fa-sm text-white-50\" /> Generate Report</a> */}\r\n              </div>\r\n              {/* Content Row */}\r\n              <div className=\"row\">\r\n                {/* Balance Card */}\r\n                <div className=\"col-xl-3 col-md-6 mb-4\">\r\n                  <div className=\"card border-left-primary shadow h-100 py-2\">\r\n                    <div className=\"card-body\">\r\n                      <div className=\"row no-gutters align-items-center\">\r\n                        <div className=\"col mr-2\">\r\n                          <div className=\"text-xs font-weight-bold text-primary text-uppercase mb-1\">Balance</div>\r\n                          <div className=\"h5 mb-0 font-weight-bold text-gray-800\">₹ {currentUserAccount?.balance.toString() ? currentUserAccount?.balance : \"updating...\"}</div>\r\n                        </div>\r\n                        <div className=\"col-auto\">\r\n                          <i className=\"fas fa-calendar fa-2x text-gray-300\" />\r\n                        </div>\r\n                      </div>\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n                {/* Withdrawal Card */}\r\n                <div className=\"col-xl-3 col-md-6 mb-4\">\r\n                  <div className=\"card border-left-success shadow h-100 py-2\">\r\n                    <div className=\"card-body\">\r\n                      <div className=\"row no-gutters align-items-center\">\r\n                        <div className=\"col mr-2\">\r\n                          <div className=\"text-xs font-weight-bold text-success text-uppercase mb-1\">Withdrawal</div>\r\n                          <div className=\"h5 mb-0 font-weight-bold text-gray-800\">₹ {currentUserAccount?.withdrawal.toString() ? currentUserAccount?.withdrawal : \"updating...\"}</div>\r\n                        </div>\r\n                        <div className=\"col-auto\">\r\n                          <i className=\"fas fa-dollar-sign fa-2x text-gray-300\" />\r\n                        </div>\r\n                      </div>\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n                {/* Minimum Deposit Card Example */}\r\n                <div className=\"col-xl-3 col-md-6 mb-4\">\r\n                  <div className=\"card border-left-info shadow h-100 py-2\">\r\n                    <div className=\"card-body\">\r\n                      <div className=\"row no-gutters align-items-center\">\r\n                        <div className=\"col mr-2\">\r\n                          <div className=\"text-xs font-weight-bold text-info text-uppercase mb-1\">Advance Payment</div>\r\n                          <div className=\"row no-gutters align-items-center\">\r\n                            <div className=\"col-auto\">\r\n                              <div className=\"h5 mb-0 mr-3 font-weight-bold text-gray-800\">₹ {currentUserAccount?.advancePay.toString() ? currentUserAccount?.advancePay : \"updating...\"}</div>\r\n                            </div>\r\n                            {/* <div className=\"col\">\r\n                              <div className=\"progress progress-sm mr-2\">\r\n                                <div className=\"progress-bar bg-info\" role=\"progressbar\" style={{width: '50%'}} aria-valuenow={50} aria-valuemin={0} aria-valuemax={100} />\r\n                              </div>\r\n                            </div> */}\r\n                          </div>\r\n                        </div>\r\n                        <div className=\"col-auto\">\r\n                          <i className=\"fas fa-clipboard-list fa-2x text-gray-300\" />\r\n                        </div>\r\n                      </div>\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n                {/* Advance Pay Card */}\r\n                <div className=\"col-xl-3 col-md-6 mb-4\">\r\n                  <div className=\"card border-left-warning shadow h-100 py-2\">\r\n                    <div className=\"card-body\">\r\n                      <div className=\"row no-gutters align-items-center\">\r\n                        <div className=\"col mr-2\">\r\n                          <div className=\"text-xs font-weight-bold text-warning text-uppercase mb-1\">Minimum Deposit</div>\r\n                          <div className=\"h5 mb-0 font-weight-bold text-gray-800\">₹ {currentUserAccount?.minDeposit.toString() ? currentUserAccount?.minDeposit : \"updating...\"}</div>\r\n                        </div>\r\n                        <div className=\"col-auto\">\r\n                          <i className=\"fas fa-comments fa-2x text-gray-300\" />\r\n                        </div>\r\n                      </div>\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n              {/* Content Row */}\r\n              <div className=\"row\">\r\n                {/* Overview */}\r\n                <div className=\"col-xl-8 col-lg-7\">\r\n                  <div className=\"card shadow mb-4\">\r\n                    {/* Card Header - Dropdown */}\r\n                    <div className=\"card-header py-3 d-flex flex-row align-items-center justify-content-between\">\r\n                      <h6 className=\"m-0 font-weight-bold text-primary\">Overview</h6>\r\n                    </div>\r\n                    {/* Card Body */}\r\n                    <div className=\"card-body\">\r\n                     <Pie data={chartData} width={500} height={250} options={{ maintainAspectRatio: false,legend:{position:'right'} }}/>\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n                {/* Pie Chart */}\r\n                <div className=\"col-xl-4 col-lg-5\">\r\n                  <div className=\"card shadow mb-4\">\r\n                    {/* Card Header - Dropdown */}\r\n                    <div className=\"card-header py-3 d-flex flex-row align-items-center justify-content-between\">\r\n                      <h6 className=\"m-0 font-weight-bold text-primary\">Account Summary</h6>\r\n                    </div>\r\n                    {/* Card Body */}\r\n                    <div className=\"card-body\">\r\n                      <ul className=\"list-group list-group-flush\">\r\n                        <li className=\"list-group-item\">\r\n                          <div className=\"row\">\r\n                            <div className=\"col-sm-12\">\r\n                              <span>Total Amount</span>\r\n                              <span style={{fontWeight:'bold',float:'right'}}>{accountData?.TotalAmount}</span>\r\n                            </div>\r\n                          </div>\r\n                        </li>\r\n                        <li className=\"list-group-item\">\r\n                          <div className=\"row\">\r\n                            <div className=\"col-sm-12\">\r\n                              <span>Withdrawal Amount</span>\r\n                              <span style={{fontWeight:'bold',float:'right'}}>{accountData?.WithdrawalAmount}</span>\r\n                            </div>\r\n                          </div>\r\n                        </li>\r\n                        <li className=\"list-group-item\">\r\n                          <div className=\"row\">\r\n                            <div className=\"col-sm-12\">\r\n                              <span>Interest Amount</span>\r\n                              <span style={{fontWeight:'bold',float:'right'}}>{accountData?.TotalInterest}</span>\r\n                            </div>\r\n                          </div>\r\n                        </li>\r\n                        <li className=\"list-group-item\">\r\n                          <div className=\"row\">\r\n                            <div className=\"col-sm-12\">\r\n                              <span>Remaining Amount</span>\r\n                              <span style={{fontWeight:'bold',float:'right'}}>{accountData?.RemainingAmount}</span>\r\n                            </div>\r\n                          </div>\r\n                        </li>\r\n                        <li className=\"list-group-item\">\r\n                          <div className=\"row\">\r\n                            <div className=\"col-sm-12\">\r\n                              <span>Account Minimum Balance</span>\r\n                              <span style={{fontWeight:'bold',float:'right'}}>{accountData?.MinimumBalance}</span>\r\n                            </div>\r\n                          </div>\r\n                        </li>\r\n                      </ul>\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n              {/* Content Row */}\r\n              <div className=\"row\">\r\n                {/* Your Account Details */}\r\n                <div className=\"col-xl-4 col-lg-5\">\r\n                  <div className=\"card shadow mb-4\">\r\n                    {/* Card Header - Dropdown */}\r\n                    <div className=\"card-header py-3 d-flex flex-row align-items-center justify-content-between\">\r\n                      <h6 className=\"m-0 font-weight-bold text-primary\">Your Account Details</h6>\r\n                    </div>\r\n                    {/* Card Body */}\r\n                    <div className=\"card-body\">\r\n                     <ul className=\"list-group list-group-flush\">\r\n                        <li className=\"list-group-item\">\r\n                          <div className=\"row\">\r\n                            <div className=\"col-sm-12\">\r\n                              <span>Balance</span>\r\n                              <span style={{fontWeight:'bold',float:'right'}}>{currentUserAccount?.balance}</span>\r\n                            </div>\r\n                          </div>\r\n                        </li>\r\n                        <li className=\"list-group-item\">\r\n                          <div className=\"row\">\r\n                            <div className=\"col-sm-12\">\r\n                              <span>Withdrawal</span>\r\n                              <span style={{fontWeight:'bold',float:'right'}}>{currentUserAccount?.withdrawal}</span>\r\n                            </div>\r\n                          </div>\r\n                        </li>\r\n                        <li className=\"list-group-item\">\r\n                          <div className=\"row\">\r\n                            <div className=\"col-sm-12\">\r\n                              <span>Advance Payment</span>\r\n                              <span style={{fontWeight:'bold',float:'right'}}>{currentUserAccount?.advancePay}</span>\r\n                            </div>\r\n                          </div>\r\n                        </li>\r\n                        <li className=\"list-group-item\">\r\n                          <div className=\"row\">\r\n                            <div className=\"col-sm-12\">\r\n                              <span>Minimum Deposit</span>\r\n                              <span style={{fontWeight:'bold',float:'right'}}>{currentUserAccount?.minDeposit}</span>\r\n                            </div>\r\n                          </div>\r\n                        </li>\r\n                      </ul>\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n                {/* Top 10 Transactions */}\r\n                <div className=\"col-xl-8 col-lg-7\">\r\n                  <div className=\"card shadow mb-4\">\r\n                    {/* Card Header - Dropdown */}\r\n                    <div className=\"card-header py-3 d-flex flex-row align-items-center justify-content-between\">\r\n                      <h6 className=\"m-0 font-weight-bold text-primary\">Top 10 Transactions</h6>\r\n                    </div>\r\n                    {/* Card Body */}\r\n                    <div className=\"card-body\">\r\n                      <Table responsive id=\"top10table\">\r\n                        \r\n                      </Table>\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            </div>\r\n            {/* /.container-fluid */}\r\n        </div>\r\n        {/* End of Content Wrapper */}\r\n      </div>\r\n         </React.Fragment>\r\n    );\r\n}\r\n\r\nexport default Dashboard;","C:\\Users\\kgane\\Documents\\GitHub\\thunder-web\\src\\contexts\\AuthContext.tsx",[],"C:\\Users\\kgane\\Documents\\GitHub\\thunder-web\\src\\pages\\Profile.tsx",["96","97","98","99","100","101","102","103","104","105","106","107","108","109","110","111","112","113","114","115"],"import React, { useEffect, useState } from 'react';\r\nimport TopNav from '../components/TopNavigation';\r\nimport { FB_COL_USERS, FB_COL_USERS_LOG } from '../constants/Constants';\r\nimport { useAuth } from '../contexts/AuthContext';\r\nimport moment from 'moment';\r\nimport Swal from 'sweetalert2';\r\nimport firebase from '../firebase';\r\n\r\nimport pic from '../assets/avatar_2x.png'\r\nimport { Spinner } from 'react-bootstrap';\r\nimport { IUser, IUserLog } from '../models/Index';\r\n\r\nconst Profile = () => {\r\n\r\n  const [userData, setUserData] = useState<any>();\r\n  const [btnDisabled, setBtnDisabled] = useState(false);\r\n  const [name, setName] = useState(\"\");\r\n  const [phone, setPhone] = useState<number | null>(0);\r\n  const [mail, setMail] = useState(\"\");\r\n  const [profilePic, setProfilePic] = useState<any>(pic);\r\n  const [isEditing, setIsEditing] = useState(false);\r\n  const [providedPassword, setProvidedPassword] = useState(\"\");\r\n  const [newPassword, setNewPassword] = useState(\"\");\r\n\r\n  const { currentUser }:any = useAuth();\r\n\r\n  useEffect(()=>{\r\n    window.scrollTo(0, 0);\r\n    if(currentUser?.photoURL){\r\n      setProfilePic(currentUser.photoURL);\r\n    }\r\n    document.getElementById(\"picture-input\")?.addEventListener(\"change\",(value)=>{triggerPictureInput(value)});\r\n    getUserData();\r\n  },[]);\r\n\r\n  const swtoast = (icon:any, title:string) => {\r\n    const Toast = Swal.mixin({\r\n        toast: true,\r\n        position: 'top-end',\r\n        showConfirmButton: false,\r\n        timer: 3000,\r\n        timerProgressBar: true,\r\n        onOpen: (toast) => {\r\n          toast.addEventListener('mouseenter', Swal.stopTimer)\r\n          toast.addEventListener('mouseleave', Swal.resumeTimer)\r\n        }\r\n      })\r\n      \r\n    Toast.fire({\r\n        icon: icon,\r\n        title: title\r\n    });\r\n  }\r\n\r\n  const getUserData = async () => {\r\n    try{\r\n        const userDoc = await firebase.firestore().collection(FB_COL_USERS).doc(currentUser?.uid).get();\r\n        let userData:any = userDoc.data();\r\n        setName(userData.displayName);\r\n        setPhone(userData.phoneNumber);\r\n        setMail(userData.email);\r\n        setUserData(userData);\r\n    }catch(ex){\r\n        console.error(ex);\r\n    }\r\n  }\r\n\r\n  const triggerPictureInput = (value:any) => {\r\n    try{\r\n      let file = value.target.files[0]; // upload the first file only\r\n      (document.getElementById(\"picture-input\") as any).value = \"\";//$(\"#picture-input\").val(\"\");\r\n      if(!file){\r\n        (document.getElementById(\"picture-input\") as any).value = \"\";\r\n        return false;\r\n      }\r\n      var regex = new RegExp(\"(.*?)\\.(png|jpg|jpeg)$\"); //allowed files\r\n      if(!(regex.test(file.name.toLowerCase()))){\r\n        alert(\"Allowed picture extensions are jpg, png, jpeg\");\r\n        (document.getElementById(\"picture-input\") as any).value = \"\";\r\n        return false;\r\n      }\r\n      updateProfileImage(file);\r\n    }catch(ex){\r\n      console.error(ex);\r\n    }\r\n  }\r\n\r\n  const removeProfilePicture = async () => {\r\n    try{\r\n      let isConfirm = false;\r\n      await Swal.fire({\r\n        title: 'Are you sure?',\r\n        text: \"you want to remove your profile picture?\",\r\n        icon: 'warning',\r\n        showCancelButton: true,\r\n        confirmButtonColor: '#3085d6',\r\n        cancelButtonColor: '#d33',\r\n        confirmButtonText: 'Yes, remove it!'\r\n      }).then((result) => {\r\n        if (result.isConfirmed) {\r\n          isConfirm = true;\r\n        }\r\n      });\r\n      if(!isConfirm)\r\n        return;\r\n      setBtnDisabled(true);\r\n      currentUser?.updateProfile({photoURL:null}).then(()=>{\r\n          firebase.firestore().collection(FB_COL_USERS).doc(currentUser.uid).update({photoURL:\"\"}).then(()=>{\r\n              setProfilePic(pic);\r\n              swtoast(\"success\", \"Your profile picture removed successfully\");\r\n              setBtnDisabled(false);\r\n          }).catch((ex:any)=>{\r\n            swtoast(\"error\", \"Something went wrong, try again\");\r\n            setBtnDisabled(false);\r\n            console.error(ex);\r\n          });\r\n      }).catch((ex:any)=>{\r\n          setBtnDisabled(false);\r\n          swtoast(\"error\", \"Something went wrong, try again\");\r\n          console.error(ex);\r\n      })\r\n    }catch(ex){\r\n      setBtnDisabled(false);\r\n      swtoast(\"error\", \"Something went wrong, try again\");\r\n      console.error(ex);\r\n    }\r\n  }\r\n\r\n  const updateProfileImage = (image:any) => {\r\n    try{\r\n        if(!image){\r\n            alert(\"No file found, try again\");\r\n            return;\r\n        }\r\n        setBtnDisabled(true);\r\n        let fileName = image.name;\r\n        let fileNameArr = fileName.split(\".\");\r\n        let extension = fileNameArr[fileNameArr.length - 1];\r\n\r\n        // Create a root reference\r\n        const storageRef = firebase.storage().ref();\r\n        let metadata:any = {\r\n            contentType : image.type,\r\n            customMetadata:{\r\n                userId : currentUser?.uid,\r\n                userName : currentUser?.displayName\r\n            }\r\n        }\r\n        storageRef.child(\"/images/pp/\"+fileName).getDownloadURL().then((img)=>{\r\n            storageRef.child(\"/images/pp/\"+fileName).delete().then(()=>{\r\n                handleImageUpload(storageRef,fileName,extension,metadata,image);\r\n            }).catch((error:any)=>{\r\n              setBtnDisabled(false);\r\n              swtoast(\"error\", \"Something went wrong, try again\");\r\n              console.error(error);\r\n            })\r\n        }).catch((error:any)=>{\r\n            if(error.code == \"storage/object-not-found\"){\r\n                handleImageUpload(storageRef,fileName,extension,metadata,image);\r\n            }else{\r\n              setBtnDisabled(false);\r\n              swtoast(\"error\", \"Something went wrong, try again\");\r\n              console.error(error);\r\n            }\r\n        });\r\n    }catch(ex){\r\n        setBtnDisabled(false);\r\n        swtoast(\"error\", \"Something went wrong, try again\");\r\n        console.error(ex);\r\n    }\r\n}\r\n\r\n  const handleImageUpload = (storageRef:any,fileName:string,extension:string,metadata:any,data:any) => {\r\n    try{\r\n        const uploadTask = storageRef.child(\"/images/pp/\"+currentUser?.uid+\".\"+extension).put(data, metadata);\r\n        // Register three observers:\r\n        // 1. 'state_changed' observer, called any time the state changes\r\n        // 2. Error observer, called on failure\r\n        // 3. Completion observer, called on successful completion\r\n        uploadTask.on('state_changed', function(snapshot:any){\r\n            // Observe state change events such as progress, pause, and resume\r\n            // Get task progress, including the number of bytes uploaded and the total number of bytes to be uploaded\r\n            var progress = (snapshot.bytesTransferred / snapshot.totalBytes) * 100;\r\n            console.log('Upload is ' + progress + '% done');\r\n            switch (snapshot.state) {\r\n            case firebase.storage.TaskState.PAUSED: // or 'paused'\r\n                console.log('Upload is paused');\r\n                break;\r\n            case firebase.storage.TaskState.RUNNING: // or 'running'\r\n                console.log('Upload is running');\r\n                break;\r\n            }\r\n        }, function(error:any) {\r\n          setBtnDisabled(false);\r\n          console.error(error);\r\n          swtoast(\"error\", \"Something went wrong, try again\");\r\n            // Handle unsuccessful uploads\r\n        }, function() {\r\n            // Handle successful uploads on complete\r\n            // For instance, get the download URL: https://firebasestorage.googleapis.com/...\r\n            uploadTask.snapshot?.ref.getDownloadURL().then(function(downloadURL:any) {\r\n                console.log('File available at', downloadURL);\r\n                currentUser?.updateProfile({\r\n                    photoURL:downloadURL\r\n                }).then(()=>{\r\n                    firebase.firestore().collection(FB_COL_USERS).doc(currentUser.uid).update({photoURL:downloadURL}).then(()=>{\r\n                        setBtnDisabled(false);\r\n                        setProfilePic(downloadURL);\r\n                        swtoast(\"success\", \"Your profile picture updated successfully\");\r\n                    }).catch((ex:any)=>{\r\n                        setBtnDisabled(false);\r\n                        console.error(ex);\r\n                        swtoast(\"error\", \"Something went wrong, try again\");\r\n                    });\r\n                }).catch((ex:any)=>{\r\n                  setBtnDisabled(false);\r\n                  console.error(ex);\r\n                  swtoast(\"error\", \"Something went wrong, try again\");\r\n                })\r\n            });\r\n        });\r\n    }catch(ex){\r\n      setBtnDisabled(false);\r\n      console.error(ex);\r\n      swtoast(\"error\", \"Something went wrong, try again\");\r\n    }\r\n  }\r\n\r\n  const updateProfile = async () => {\r\n    try{\r\n      if(!name){\r\n          swtoast(\"warning\", \"Please enter your name\");\r\n          return;\r\n      }\r\n      if(!phone){\r\n        swtoast(\"warning\", \"Please enter your phone no\");\r\n        return;\r\n      }\r\n      if(!mail){\r\n        swtoast(\"warning\", \"Please enter your email\");\r\n        return;\r\n      }\r\n      let isValid = true;\r\n      if(mail != userData.email){\r\n        await firebase.auth().fetchSignInMethodsForEmail(mail).then((res)=>{\r\n          if(res.length != 0){\r\n            swtoast(\"warning\", \"Email already exists\");\r\n            isValid = false;\r\n          }\r\n        }).catch((error)=>{\r\n          if(error.code.indexOf(\"auth/invalid-email\") != -1){\r\n            swtoast(\"warning\", \"Please enter valid mail\");\r\n            isValid = false;\r\n          }else if(error.code.indexOf(\"auth/email-already-in-use\") != -1){\r\n            swtoast(\"warning\", \"Email already exists\");\r\n            isValid = false;\r\n          }else{\r\n            swtoast(\"warning\", \"Something went wrong, try again\");\r\n            isValid = false;\r\n          }\r\n        });\r\n      }\r\n      if(newPassword){\r\n        if(newPassword.length < 6){\r\n          swtoast(\"warning\", \"Password should have atleast 6 characters\");\r\n          isValid = false;\r\n        }\r\n      }\r\n      if(!isValid)\r\n        return;\r\n      let isConfirm = false;\r\n      await Swal.fire({\r\n        title: 'Are you sure?',\r\n        text: \"you want to update your profile?\",\r\n        icon: 'warning',\r\n        showCancelButton: true,\r\n        confirmButtonColor: '#3085d6',\r\n        cancelButtonColor: '#d33',\r\n        confirmButtonText: 'Update'\r\n      }).then(async (result) => {\r\n        if (result.isConfirmed) {\r\n          if(newPassword || mail != userData.email){\r\n            await (Swal as any).queue([{\r\n              title: 'Confirm Password',\r\n              confirmButtonText: 'Confirm',\r\n              showCancelButton: true,\r\n              input: 'text',\r\n              inputValidator: async (value:any) => {\r\n                  if (!value) {\r\n                    return 'You need to provide current password!'\r\n                  }else{\r\n                    let isValid = false;\r\n                    (Swal as any).enableLoading();\r\n                    let text = \"\";\r\n                    isValid = await new Promise((resolve) => {\r\n                        var credential = firebase.auth.EmailAuthProvider.credential(\r\n                          currentUser?.email as any,\r\n                          value\r\n                        );\r\n                        currentUser?.reauthenticateWithCredential(credential).then(async ()=>{\r\n                          resolve(true);\r\n                        }).catch((ex:any)=>{\r\n                          if(ex.code.indexOf(\"auth/wrong-password\") != -1){\r\n                            text = \"Password is wrong\";\r\n                            resolve(false);\r\n                          }else if(ex.code.indexOf(\"auth/too-many-requests\") != -1){\r\n                            text = \"Too many attempts. try again later\";\r\n                            resolve(false);\r\n                          }else{\r\n                            text = \"Something went wrong, try again\";\r\n                            resolve(false);\r\n                          }\r\n                        });\r\n                    });\r\n                    (Swal as any).disableLoading();\r\n                    if(!isValid){\r\n                        return text;\r\n                    }\r\n                  }\r\n              },\r\n              text: 'Type your current password to change email/password',\r\n              showLoaderOnConfirm: true,\r\n              preConfirm: () => {\r\n                  isConfirm = true;\r\n                }\r\n            }]);\r\n          }else{\r\n            isConfirm = true;\r\n          }\r\n        }\r\n      });\r\n      if(!isConfirm)\r\n        return;\r\n      let metadata = {\r\n        displayName : name,\r\n        phoneNumber : phone\r\n      }\r\n      setBtnDisabled(true);\r\n      if(name != userData.displayName || phone != userData.phoneNumber){\r\n        await new Promise((resolve) => {\r\n          currentUser?.updateProfile({displayName:name}).then(()=>{\r\n            firebase.firestore().collection(FB_COL_USERS).doc(currentUser?.uid).update(metadata).then(async ()=>{\r\n              if(name != userData.displayName){\r\n                let ULog:IUserLog = {\r\n                  userUID : currentUser?.uid,\r\n                  name : userData.displayName,\r\n                  type : \"Update\",\r\n                  field : \"displayName\",\r\n                  oldValue : userData.displayName,\r\n                  newValue : name,\r\n                  timestamp : new Date(),\r\n                  createdTime : new Date().toString(),\r\n                  createdBy : userData.displayName\r\n                }\r\n                await firebase.firestore().collection(FB_COL_USERS_LOG).doc().set(ULog);\r\n              }  \r\n              if(phone != userData.phoneNumber){\r\n                let ULog:IUserLog = {\r\n                  userUID : currentUser?.uid,\r\n                  name : userData.displayName,\r\n                  type : \"Update\",\r\n                  field : \"phoneNumber\",\r\n                  oldValue : userData.phoneNumber,\r\n                  newValue : phone ? phone : \"\",\r\n                  timestamp : new Date(),\r\n                  createdTime : new Date().toString(),\r\n                  createdBy : userData.displayName\r\n                }\r\n                await firebase.firestore().collection(FB_COL_USERS_LOG).doc().set(ULog);\r\n              }\r\n              resolve(true);\r\n            }).catch((ex)=>{\r\n              console.error(ex);\r\n              resolve(false);\r\n              //setBtnDisabled(false);\r\n              //swtoast(\"error\", \"Something went wrong, try again\");\r\n            });\r\n          }).catch((ex:any)=>{\r\n            console.error(ex);\r\n            //setBtnDisabled(false);\r\n            resolve(false);\r\n            //swtoast(\"error\", \"Something went wrong, try again\");\r\n          });\r\n        });\r\n      }\r\n\r\n      //update email\r\n      if(mail != userData.email){\r\n        await new Promise((resolve) => {\r\n          firebase.auth().currentUser?.updateEmail(mail).then(()=>{\r\n            firebase.firestore().collection(FB_COL_USERS).doc(currentUser.uid).update({email:mail}).then(async ()=>{\r\n                let ULog:IUserLog = {\r\n                    userUID : currentUser.uid,\r\n                    name : userData.displayName,\r\n                    type : \"Update\",\r\n                    field : \"email\",\r\n                    oldValue : userData.email,\r\n                    newValue : mail,\r\n                    timestamp : new Date(),\r\n                    createdTime : new Date().toString(),\r\n                    createdBy : userData.displayName\r\n                }\r\n                await firebase.firestore().collection(FB_COL_USERS_LOG).doc().set(ULog);\r\n                resolve(true);\r\n                // Alert.alert(\"Success\",\"Email updated successfully. Please login again\",[{text:'Login',onPress:()=>{\r\n                    \r\n                // }}]);\r\n            });\r\n          }).catch((error)=>{\r\n            console.error(error);\r\n            resolve(false);\r\n          });\r\n        });\r\n      }\r\n\r\n      //update password\r\n      if(newPassword){\r\n        await new Promise((resolve) => {\r\n          firebase.auth().currentUser?.updatePassword(newPassword).then(async ()=>{\r\n            let ULog:IUserLog = {\r\n                userUID : currentUser.uid,\r\n                name : userData.displayName,\r\n                type : \"Update\",\r\n                field : \"Password\",\r\n                oldValue : \"......\",\r\n                newValue : \"......\",\r\n                timestamp : new Date(),\r\n                createdTime : new Date().toString(),\r\n                createdBy : userData.displayName\r\n            }\r\n            await firebase.firestore().collection(FB_COL_USERS_LOG).doc().set(ULog);\r\n            resolve(true);\r\n            // Alert.alert(\"Success\",\"Password updated successfully. Please login again\",[{text:'Login',onPress:()=>{\r\n                \r\n            // }}]);\r\n          }).catch((error)=>{\r\n            console.error(error);\r\n            resolve(false);\r\n          });\r\n        });\r\n      }\r\n      setBtnDisabled(false);\r\n      setIsEditing(false);\r\n      if(newPassword || mail != userData.email){\r\n        Swal.fire({\r\n          title: 'Login Required',\r\n          text: \"Please login again\",\r\n          icon: 'warning',\r\n          showCancelButton: false,\r\n          confirmButtonColor: '#3085d6',\r\n          cancelButtonColor: '#d33',\r\n          confirmButtonText: 'Login'\r\n        }).then(() => {\r\n          firebase.auth().signOut();\r\n        })\r\n      }else{\r\n        swtoast(\"success\", \"Profile updated successfully\");\r\n        getUserData();\r\n      }\r\n    }catch(ex){\r\n      setBtnDisabled(false);\r\n      swtoast(\"error\", \"Something went wrong, try again\");\r\n    }\r\n  }\r\n\r\n  return(\r\n        <div id=\"wrapper\">\r\n         <div id=\"content-wrapper\" className=\"d-flex flex-column\">\r\n             <TopNav></TopNav>\r\n             {/* Begin Page Content */}\r\n             <div className=\"container-fluid\" style={{paddingTop: '4.5rem'}}>\r\n                <div className=\"main-body\">\r\n                  <div className=\"row gutters-sm\">\r\n                    <div className=\"col-md-4 mb-3\">\r\n                      <div className=\"card\">\r\n                        <div className=\"card-body\">\r\n                          <div className=\"d-flex flex-column align-items-center text-center\">\r\n                            <img src={profilePic} alt=\"Admin\" className=\"rounded-circle\" width={150} />\r\n                            <div className=\"mt-3\">\r\n                              <h4 style={{fontWeight:'bold',color:'black'}}>{userData ? userData.displayName.toUpperCase() : \"\"}</h4>\r\n                              <p className=\"text-secondary mb-1\">{userData ? userData.email : \"\"}</p>\r\n                              <p className=\"text-muted font-size-sm\">{userData ? userData.isAdmin ? \"Admin\" : \"User\" : \"\"}</p>\r\n                              <button className=\"btn btn-outline-danger mr-4\" disabled={btnDisabled} onClick={() => removeProfilePicture()}> Delete Picture</button>\r\n                              <button className=\"btn btn-outline-primary\" disabled={btnDisabled} onClick={() => {\r\n                                document.getElementById(\"picture-input\")?.click();\r\n                              }}>Edit Picture</button>\r\n                              <input type=\"file\" accept=\"image/*\" id=\"picture-input\" hidden={true}/>\r\n                            </div>\r\n                          </div>\r\n                        </div>\r\n                      </div>\r\n                    </div>\r\n                    <div className=\"col-md-8\">\r\n                      <div className=\"card mb-3\">\r\n                        <div className=\"card-body\">\r\n                          <div className=\"row\">\r\n                            <div className=\"col-sm-3\">\r\n                              <h6 className=\"mb-0\">Name</h6>\r\n                            </div>\r\n                            <div className=\"col-sm-9 text-secondary\">\r\n                              <input type=\"text\" value={name ? name.toUpperCase() : \"\"} onChange={(e) => setName(e.target.value)} placeholder=\"name\" hidden={!isEditing} className=\"form-control\"/>\r\n                              <span hidden={isEditing}>{userData ? userData.displayName.toUpperCase() : \"\"}</span>\r\n                            </div>\r\n                          </div>\r\n                          <hr />\r\n                          <div className=\"row\">\r\n                            <div className=\"col-sm-3\">\r\n                              <h6 className=\"mb-0\">Phone</h6>\r\n                            </div>\r\n                            <div className=\"col-sm-9 text-secondary\">\r\n                              <input type=\"text\" value={phone ? phone : \"\"} minLength={8} maxLength={15} onChange={(e) => setPhone(e.target.value ? parseInt(e.target.value) : null)} placeholder=\"phone no\" hidden={!isEditing} className=\"form-control\"/>\r\n                              <span hidden={isEditing}>{userData ? userData.phoneNumber : \"\"}</span>\r\n                            </div>\r\n                          </div>\r\n                          <hr />\r\n                          <div className=\"row\">\r\n                            <div className=\"col-sm-3\">\r\n                              <h6 className=\"mb-0\">Email</h6>\r\n                            </div>\r\n                            <div className=\"col-sm-9 text-secondary\">\r\n                              <input type=\"text\" value={mail ? mail : \"\"} onChange={(e) => setMail(e.target.value)} placeholder=\"email address\" hidden={!isEditing} className=\"form-control\"/>\r\n                              <span hidden={isEditing}>{userData ? userData.email : \"\"}</span>\r\n                            </div>\r\n                          </div>\r\n                          <hr />\r\n                          <div className=\"row\">\r\n                            <div className=\"col-sm-3\">\r\n                              <h6 className=\"mb-0\">Password</h6>\r\n                            </div>\r\n                            <div className=\"col-sm-9 text-secondary\">\r\n                              <input type=\"password\" value={newPassword} placeholder=\"new password\" onChange={(e) => setNewPassword(e.target.value)} hidden={!isEditing} className=\"form-control\"/>\r\n                              <span hidden={isEditing}>●●●●●●●●●●</span>\r\n                            </div>\r\n                          </div>\r\n                          <hr />\r\n                          <div className=\"row\">\r\n                            <div className=\"col-sm-3\">\r\n                              <h6 className=\"mb-0\">Type</h6>\r\n                            </div>\r\n                            <div className=\"col-sm-9 text-secondary\">\r\n                             {userData ? userData.isAdmin ? \"Admin\" : \"User\" : \"\"}\r\n                            </div>\r\n                          </div>\r\n                          <hr />\r\n                          <div className=\"row\">\r\n                            <div className=\"col-sm-3\">\r\n                              <h6 className=\"mb-0\">Created Date</h6>\r\n                            </div>\r\n                            <div className=\"col-sm-9 text-secondary\">\r\n                              {userData ? moment(userData.metadata.creationTime).format(\"DD-MMM-YYYY hh:mm:ss\") : \"\"}\r\n                            </div>\r\n                          </div>\r\n                          <hr />\r\n                          <div className=\"row\">\r\n                            <div className=\"col-sm-3\">\r\n                              <h6 className=\"mb-0\">Last Login</h6>\r\n                            </div>\r\n                            <div className=\"col-sm-9 text-secondary\">\r\n                              {userData ? moment(currentUser?.metadata.lastSignInTime).format(\"DD-MMM-YYYY hh:mm:ss\") : \"\"}\r\n                            </div>\r\n                          </div>\r\n                          <hr />\r\n                          <div className=\"row\">\r\n                            <div className=\"col-sm-3\">\r\n                              <h6 className=\"mb-0\">Account ID</h6>\r\n                            </div>\r\n                            <div className=\"col-sm-9 text-secondary\">\r\n                              {userData ? userData.linkId : \"\"}\r\n                            </div>\r\n                          </div>\r\n                          <hr />\r\n                          <div className=\"row\">\r\n                            <div className=\"col-sm-3\">\r\n                              <h6 className=\"mb-0\">User ID</h6>\r\n                            </div>\r\n                            <div className=\"col-sm-9 text-secondary\">\r\n                              {userData ? userData.uid : \"\"}\r\n                            </div>\r\n                          </div>\r\n                          <hr />\r\n                          <div className=\"row\">\r\n                            <div className=\"col-sm-12\">\r\n                            <button className=\"btn btn-primary float-right\" hidden={isEditing} onClick={() => setIsEditing(true)} disabled={btnDisabled}>Edit Profile</button>\r\n                            <button className=\"btn btn-primary float-right\" hidden={!isEditing} disabled={btnDisabled} onClick={() => updateProfile()}>Save Profile</button>\r\n                            <button className=\"btn btn-danger float-right\" hidden={!isEditing} onClick={() => setIsEditing(false)} disabled={btnDisabled} style={{marginRight:10}}>Cancel</button>\r\n                            </div>\r\n                          </div>\r\n                        </div>\r\n                      </div>\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n             {/* /.container-fluid */}\r\n         </div>\r\n         {/* End of Content Wrapper */}\r\n       </div>\r\n     );\r\n}\r\n\r\nexport default Profile;","C:\\Users\\kgane\\Documents\\GitHub\\thunder-web\\src\\pages\\Register.tsx",["116","117","118","119","120","121"],"import React from \"react\";\r\nimport '../styles/Register.css';\r\nimport firebase from '../firebase';\r\nimport Swal from 'sweetalert2';\r\nimport icon from '../assets/earth.png';\r\nimport { IUser } from \"../models/Index\";\r\nimport { FB_COL_USERS } from \"../constants/Constants\";\r\nimport { Link, Redirect } from \"react-router-dom\";\r\n\r\ninterface IRegisterState{\r\n    name : string\r\n    email : string\r\n    pass : string\r\n    conpass : string\r\n    mobileNo : string\r\n    btndisable : boolean\r\n    redirect : boolean\r\n}\r\n\r\nclass Registration extends React.Component<{},IRegisterState>{\r\n  constructor(props:any){\r\n    super(props);\r\n    this.state = {\r\n        name : \"\",\r\n        email : \"\",\r\n        pass : \"\",\r\n        conpass : \"\",\r\n        mobileNo : \"\",\r\n        btndisable : false,\r\n        redirect : false\r\n    }\r\n  }\r\n\r\n  componentDidMount(){\r\n    window.scrollTo(0, 0);\r\n  }\r\n\r\n  swtoast = (icon:any, title:string) => {\r\n    const Toast = Swal.mixin({\r\n        toast: true,\r\n        position: 'top-end',\r\n        showConfirmButton: false,\r\n        timer: 3000,\r\n        timerProgressBar: true,\r\n        onOpen: (toast) => {\r\n          toast.addEventListener('mouseenter', Swal.stopTimer)\r\n          toast.addEventListener('mouseleave', Swal.resumeTimer)\r\n        }\r\n      })\r\n      \r\n    Toast.fire({\r\n        icon: icon,\r\n        title: title\r\n    });\r\n  }\r\n\r\n  fieldValidation = async (level:string) => {\r\n    let obj = {\r\n        isValid : true,\r\n        icon : \"warning\",\r\n        text : \"\"\r\n    };\r\n    let fields = [\"_fn\",\"_mail\",\"_phone\",\"_pass\",\"_conpass\"];\r\n    let focusField, count = 0;\r\n    fields.forEach((field)=>{\r\n        let input:any = document.getElementById(level+field);\r\n        input.classList.remove(\"border-danger\");\r\n        if(!input.value){\r\n            input.classList.add(\"border-danger\");\r\n            obj.isValid = false;\r\n            obj.text =\"Please fill all the mandatory fields\";\r\n            if(count === 0){\r\n                focusField = input;\r\n                count++;\r\n            }\r\n        }\r\n    });\r\n    if(obj.isValid){\r\n        let pass:any = document.getElementById(level+\"_pass\");\r\n        let conpass:any = document.getElementById(level+\"_conpass\");\r\n        if(pass.value !== conpass.value){\r\n            pass.classList.add(\"border-danger\");\r\n            conpass.classList.add(\"border-danger\");\r\n            focusField = conpass;\r\n            obj.isValid = false;\r\n            obj.text = \"Password doesn't match\";\r\n        }\r\n    }\r\n    if(!obj.isValid){\r\n        focusField.focus();\r\n        this.swtoast(obj.icon, obj.text);\r\n    }\r\n    return obj.isValid;\r\n  }\r\n\r\n  onChange = (e:any, type:string) => {\r\n    if(type == \"mobile\"){\r\n      const re = /^[0-9\\b]+$/;\r\n      if (e.target.value === '' || re.test(e.target.value)) {\r\n        this.setState({mobileNo: e.target.value})\r\n      }\r\n    }else{\r\n      \r\n    }\r\n  }\r\n\r\n  registerUser = async (event:any, level:string) => {\r\n    let _this = this;\r\n    event.preventDefault();\r\n    const fieldValidation = await this.fieldValidation(level);\r\n    if(!fieldValidation){\r\n        return false;\r\n    }\r\n    this.setState({btndisable:true});\r\n    firebase.auth().createUserWithEmailAndPassword(this.state.email,this.state.pass).then(()=>{\r\n      var currentUser:any = firebase.auth().currentUser;\r\n        if(currentUser) {\r\n          currentUser.updateProfile({\r\n          displayName: _this.state.name\r\n        }).then(async function() {\r\n          let metadata = {\r\n            creationTime : currentUser?.metadata.creationTime,\r\n            lastSignInTime : currentUser?.metadata.lastSignInTime\r\n          }\r\n          let userMetadata : IUser = {\r\n            uid : currentUser.uid,\r\n            displayName : _this.state.name,\r\n            email : currentUser.email,\r\n            emailVerified : false,\r\n            phoneNumber : parseInt(_this.state.mobileNo),\r\n            isAdmin : false,\r\n            isVerified : false,\r\n            isRejected : false,\r\n            metadata : metadata\r\n          }\r\n          await firebase.firestore().collection(FB_COL_USERS).doc(currentUser.uid).set(userMetadata);\r\n          firebase.auth().signOut().then(() => {\r\n            _this.setState({btndisable:false});\r\n            Swal.fire({\r\n              title: 'Success',\r\n              text: \"Now you are a part of our organization\",\r\n              icon: 'success',\r\n              showCancelButton: false,\r\n              confirmButtonColor: '#3085d6',\r\n              cancelButtonColor: '#d33',\r\n              confirmButtonText: 'Login'\r\n            }).then((result) => {\r\n              if (result.value) {\r\n              _this.setState({redirect:true});\r\n              }\r\n            })\r\n          });\r\n        }).catch(function(err:any) {\r\n          // An error happened.\r\n          _this.setState({btndisable:false});\r\n          console.error(err);\r\n          Swal.fire({\r\n            icon: 'error',\r\n            title: 'Oops...',\r\n            text: 'Something went wrong!',\r\n            footer: '<a href>Why do I have this issue?</a>'\r\n          })\r\n          firebase.auth().currentUser?.delete();\r\n        });\r\n      }\r\n    }).catch((error:any)=>{\r\n      this.setState({btndisable:false});\r\n      if(error.code === \"auth/invalid-email\"){\r\n        let mail = document.getElementById(level+\"_mail\");\r\n        mail?.classList.add(\"border-danger\");\r\n        mail?.focus();\r\n        _this.swtoast(\"warning\", \"Please enter valid mail\");\r\n        return;\r\n      }else if(error.code === \"auth/weak-password\"){\r\n        let pass = document.getElementById(level+\"_pass\");\r\n        pass?.classList.add(\"border-danger\");\r\n        pass?.focus();\r\n        _this.swtoast(\"warning\", \"Password should have atleast 6 characters\");\r\n        return;\r\n      }else if(error.code == \"auth/email-already-in-use\"){\r\n        let mail = document.getElementById(level+\"_mail\");\r\n        mail?.classList.add(\"border-danger\");\r\n        mail?.focus();\r\n        _this.swtoast(\"warning\", \"Email already exists\");\r\n        return;\r\n      }else{\r\n        console.error(error);\r\n        _this.swtoast(\"warning\", \"Something went wrong. Please try again\");\r\n        return;\r\n      }\r\n    });\r\n  }\r\n\r\n  render(){\r\n    const state = this.state;\r\n    return(\r\n      <React.Fragment>\r\n        <div className=\"container-fluid register\">\r\n                <div className=\"row\">\r\n                    <div className=\"col-md-3 register-left\">\r\n                        <img src={icon}/>{/* \"https://image.ibb.co/n7oTvU/logo_white.png\" alt=\"\"/> */}\r\n                        <h3>Welcome</h3>\r\n                        <p>You are 30 seconds away from accessing our organization!</p>\r\n                        <Link to=\"/login\">\r\n                        <button type=\"submit\" name=\"\" disabled={state.btndisable}>Login</button><br/>\r\n                        </Link>\r\n                    </div>\r\n                    <div className=\"col-md-9 register-right\">\r\n                    <div className=\"tab-pane fade show active\" id=\"home\" role=\"tabpanel\" aria-labelledby=\"home-tab\">\r\n                                <h3 className=\"register-heading\">Register to Thunder Organization</h3>\r\n                                <div className=\"row register-form\">\r\n                                    <div className=\"col-md-6\">\r\n                                        <div className=\"form-group\">\r\n                                            <input type=\"text\" className=\"form-control\" id=\"user_fn\" placeholder=\"Your Name\" value={state.name} onChange={(e)=>this.setState({name:e.target.value})}/>\r\n                                        </div>\r\n                                        <div className=\"form-group\">\r\n                                            <input type=\"email\" className=\"form-control\" id=\"user_mail\" placeholder=\"Your Email\"  value={state.email} onChange={(e)=>this.setState({email:e.target.value})}/>\r\n                                        </div>\r\n                                        <div className=\"form-group\">\r\n                                            <input type=\"text\" minLength={8} maxLength={15} name=\"txtEmpPhone\" id=\"user_phone\" className=\"form-control\" placeholder=\"Your Mobile No\" value={state.mobileNo} onChange={(e) => this.onChange(e,\"mobile\")}/>\r\n                                        </div>\r\n                                    </div>\r\n                                    <div className=\"col-md-6\">\r\n                                        <div className=\"form-group\">\r\n                                            <input type=\"password\" className=\"form-control\" id=\"user_pass\" placeholder=\"Password\"  value={state.pass} onChange={(e)=>this.setState({pass:e.target.value})}/>\r\n                                        </div>\r\n                                        <div className=\"form-group\">\r\n                                            <input type=\"password\" className=\"form-control\" id=\"user_conpass\" placeholder=\"Confirm Password\"  value={state.conpass} onChange={(e)=>this.setState({conpass:e.target.value})}/>\r\n                                        </div>\r\n                                        <p className=\"terms-and-conditions\">By clicking Sign Up, you agree to our <a href=\"#\" id=\"terms-link\" rel=\"nofollow\">Terms</a>, <a href=\"#\" id=\"privacy-link\" rel=\"nofollow\">Data Policy</a> and <a href=\"#\" id=\"cookie-use-link\"  rel=\"nofollow\">Cookie Policy</a>. You may receive SMS notifications from us and can opt out at any time.</p>\r\n                                        {\r\n                                          state.btndisable ? <button className=\"btnRegister\" type=\"button\" disabled>\r\n                                          <span className=\"spinner-border spinner-border-sm\" role=\"status\" aria-hidden=\"true\"></span>\r\n                                          Registering...\r\n                                          </button> : <input type=\"submit\" className=\"btnRegister\"  value=\"Register\" onClick={(event)=>this.registerUser(event,\"user\")} disabled={state.btndisable}/>\r\n                                        }                                      \r\n                                    </div>\r\n                                </div>\r\n                            </div>\r\n                    </div>\r\n                </div>\r\n              </div>\r\n              {(this.state.redirect) ? <Redirect to={{pathname:\"/login\"}} push></Redirect> : null}\r\n      </React.Fragment>\r\n    );\r\n  };\r\n}\r\n\r\nexport default Registration;","C:\\Users\\kgane\\Documents\\GitHub\\thunder-web\\src\\pages\\UserAccounts.tsx",["122","123"],"import React, { useEffect } from 'react';\r\nimport TopNav from '../components/TopNavigation';\r\nimport $ from 'jquery';\r\nimport moment from 'moment';\r\nimport 'datatables.net';\r\nimport 'datatables.net-dt/css/jquery.dataTables.css';\r\nimport firebase from '../firebase';\r\nimport { Table } from 'react-bootstrap';\r\nimport { FB_COL_USER_ACCOUNTS } from '../constants/Constants';\r\nimport { IUserAccount } from '../models/Index';\r\n\r\nconst UserAccounts = () => {\r\n\r\n  useEffect(()=>{\r\n    getUserAccounts();\r\n  },[]);\r\n\r\n  const initializeTable = (id:string,accounts:any[]) => {\r\n    let dataSet:any = [];\r\n    if ( $.fn.dataTable.isDataTable( id ) ) {\r\n      let table = $( id ).DataTable();\r\n      table.destroy();\r\n    }\r\n    accounts.forEach((obj:IUserAccount)=>{\r\n      dataSet.push([\r\n        obj.name,\r\n        obj.balance ? obj.balance : 0,\r\n        obj.withdrawal ? obj.withdrawal : 0,\r\n        obj.advancePay ? obj.advancePay : 0,\r\n        obj.minDeposit ? obj.minDeposit : 0,\r\n        obj.docid\r\n      ]);\r\n    });\r\n    $(id).DataTable({\r\n      order : [], \r\n      // rowReorder: {\r\n      //   selector: 'td:nth-child(2)'\r\n      // },\r\n      responsive: true,\r\n      data: dataSet,\r\n      columns: [\r\n        { title: \"Name\" },\r\n        { title: \"Balance\" },\r\n        { title: \"Withdrawal\" },\r\n        { title: \"Advance payment\" },\r\n        { title: \"Minimum Deposit\" },\r\n        { title: \"Account Id\" }\r\n    ]\r\n    });\r\n  }\r\n\r\n  const getUserAccounts = async () =>{\r\n      try{\r\n          let uaDocs = await firebase.firestore().collection(FB_COL_USER_ACCOUNTS).orderBy(\"name\",\"asc\").get();\r\n          let userAccounts:any[] = [];\r\n          uaDocs.forEach((doc)=>{\r\n              let data = doc.data();\r\n              let docid = doc.id;\r\n              let uaObj:IUserAccount = {\r\n                  name : data.name,\r\n                  balance : data.balance,\r\n                  withdrawal : data.withdrawal,\r\n                  minDeposit : data.minDeposit,\r\n                  advancePay : data.advancePay,\r\n                  docid : docid\r\n              }\r\n              userAccounts.push(uaObj);\r\n          });\r\n          initializeTable(\"#accountTable\",userAccounts)\r\n      }catch(ex){\r\n          console.error(ex);\r\n      }\r\n  }\r\n  return(\r\n        <div id=\"wrapper\">\r\n         <div id=\"content-wrapper\" className=\"d-flex flex-column\">\r\n             <TopNav></TopNav>\r\n             {/* Begin Page Content */}\r\n             <div className=\"container-fluid\" style={{paddingTop: '4.5rem'}}>\r\n               {/* Page Heading */}\r\n               <div className=\"d-sm-flex align-items-center justify-content-between mb-4\">\r\n                 <h1 className=\"h3 mb-0 text-gray-800\">User Accounts</h1>\r\n                 {/* <a href=\"#\" className=\"d-none d-sm-inline-block btn btn-sm btn-primary shadow-sm\"><i className=\"fas fa-download fa-sm text-white-50\" /> Generate Report</a> */}\r\n               </div>\r\n               <div className=\"row\">\r\n                 {/* Accounts */}\r\n                 <div className=\"col-xl-12 col-lg-12\">\r\n                   <div className=\"card shadow mb-4\">\r\n                     {/* Card Header - Dropdown */}\r\n                     <div className=\"card-header py-3 d-flex flex-row align-items-center justify-content-between\">\r\n                       <h6 className=\"m-0 font-weight-bold text-primary\">Accounts</h6>\r\n                     </div>\r\n                     {/* Card Body */}\r\n                     <div className=\"card-body\">\r\n                      <Table responsive id=\"accountTable\"/>\r\n                     </div>\r\n                   </div>\r\n                 </div>\r\n               </div>\r\n             </div>\r\n             {/* /.container-fluid */}\r\n         </div>\r\n         {/* End of Content Wrapper */}\r\n       </div>\r\n     );\r\n}\r\n\r\nexport default UserAccounts;","C:\\Users\\kgane\\Documents\\GitHub\\thunder-web\\src\\routers\\PrivateRoute.tsx",[],"C:\\Users\\kgane\\Documents\\GitHub\\thunder-web\\src\\firebase.js",[],["124","125"],"C:\\Users\\kgane\\Documents\\GitHub\\thunder-web\\src\\constants\\Constants.ts",[],"C:\\Users\\kgane\\Documents\\GitHub\\thunder-web\\src\\components\\TopNavigation.tsx",["126"],"import {Navbar,Nav} from \"react-bootstrap\";\r\nimport { Link, useHistory } from \"react-router-dom\";\r\nimport firebase from '../firebase';\r\nimport icon from '../assets/earth.png';\r\nimport avatar from '../assets/avatar_2x.png'\r\nimport { useEffect, useState } from \"react\";\r\nimport BModal from \"./BModal\";\r\nimport { useAuth } from \"../contexts/AuthContext\";\r\nimport '../styles/TopNav.css';\r\n\r\nconst TopNav = () => {\r\n    const [show, setShow] = useState(false);\r\n    const [profilePic, setProfilePic] = useState<any>(avatar);\r\n    const { currentUser }:any = useAuth();\r\n\r\n    useEffect(()=>{\r\n        if(currentUser?.photoURL){\r\n          setProfilePic(currentUser.photoURL);\r\n        }\r\n    },[]);\r\n\r\n    const history = useHistory();\r\n\r\n    const handleClose = () => setShow(false);\r\n    const handleShow = () => setShow(true);\r\n\r\n    const handleLogout = () => {\r\n        setShow(false);\r\n        firebase.auth().signOut();\r\n    }\r\n    return(\r\n      <>\r\n        <BModal display={show} close={handleClose} logout={handleLogout}/>\r\n        <Navbar expand=\"lg\" className=\"bg-white mb-4 fixed-top shadow\">\r\n            <Navbar.Brand onClick={() => history.push(\"/\")}>\r\n                <img\r\n                    src={icon}\r\n                    width=\"40\"\r\n                    height=\"30\"\r\n                    className=\"d-inline-block align-top brand-logo-cus\"\r\n                    alt=\"logo\"\r\n                />\r\n                <span style={{fontWeight:'bold'}} className=\"text-primary\">Thunder Organization</span>\r\n            </Navbar.Brand>\r\n            <Navbar.Toggle aria-controls=\"basic-navbar-nav\" />\r\n            <Navbar.Collapse id=\"basic-navbar-nav\">\r\n                <Nav className=\"mr-auto\">\r\n                    <Nav.Link onClick={() => history.push(\"/\")}>Dashboard</Nav.Link>\r\n                    <Nav.Link onClick={() => history.push(\"/accounts\")}>User Accounts</Nav.Link>\r\n                    <Nav.Link onClick={() => history.push(\"/transactions\")}>All Transactions</Nav.Link>\r\n                    <Nav.Link onClick={() => history.push(\"/profile\")}>My Profile</Nav.Link>\r\n                    <Nav.Link onClick={() => handleShow()}>Logout</Nav.Link>\r\n                </Nav>\r\n            </Navbar.Collapse>\r\n            <Navbar.Collapse className=\"justify-content-end\">\r\n                <img\r\n                    src={profilePic}\r\n                    width=\"40\"\r\n                    height=\"30\"\r\n                    style={{borderRadius:'100%'}}\r\n                    className=\"d-inline-block align-top\"\r\n                    alt=\"logo\"\r\n                />\r\n                <Navbar.Text style={{marginLeft:'5px'}}>\r\n                <Link to=\"/profile\">{currentUser?.displayName}</Link>\r\n                </Navbar.Text>\r\n            </Navbar.Collapse>\r\n        </Navbar>\r\n      </>\r\n    );\r\n}\r\n\r\nexport default TopNav;","C:\\Users\\kgane\\Documents\\GitHub\\thunder-web\\src\\components\\BModal.tsx",["127"],"import { useState } from \"react\";\r\nimport {Modal, Button} from \"react-bootstrap\";\r\n\r\nconst BModal = ({display,close,logout}:{display:boolean,close:any,logout:any}) => {\r\n  \r\n    return (\r\n      <>\r\n        <Modal\r\n          show={display}\r\n          onHide={close}\r\n          backdrop=\"static\"\r\n          keyboard={false}\r\n        >\r\n          <Modal.Header closeButton>\r\n            <Modal.Title>Modal title</Modal.Title>\r\n          </Modal.Header>\r\n          <Modal.Body>\r\n            Are you sure? You want to logout?\r\n          </Modal.Body>\r\n          <Modal.Footer>\r\n            <Button variant=\"secondary\" onClick={close}>\r\n              Close\r\n            </Button>\r\n            <Button variant=\"primary\" onClick={logout}>Logout</Button>\r\n          </Modal.Footer>\r\n        </Modal>\r\n      </>\r\n    );\r\n  }\r\n  \r\nexport default BModal;",["128","129"],{"ruleId":"130","replacedBy":"131"},{"ruleId":"132","replacedBy":"133"},{"ruleId":"134","severity":1,"message":"135","line":16,"column":7,"nodeType":"136","endLine":16,"endColumn":9,"suggestions":"137"},{"ruleId":"138","severity":1,"message":"139","line":52,"column":43,"nodeType":"140","messageId":"141","endLine":52,"endColumn":45},{"ruleId":"138","severity":1,"message":"139","line":47,"column":22,"nodeType":"140","messageId":"141","endLine":47,"endColumn":24},{"ruleId":"138","severity":1,"message":"139","line":49,"column":28,"nodeType":"140","messageId":"141","endLine":49,"endColumn":30},{"ruleId":"138","severity":1,"message":"139","line":176,"column":35,"nodeType":"140","messageId":"141","endLine":176,"endColumn":37},{"ruleId":"138","severity":1,"message":"139","line":179,"column":41,"nodeType":"140","messageId":"141","endLine":179,"endColumn":43},{"ruleId":"138","severity":1,"message":"139","line":213,"column":31,"nodeType":"140","messageId":"141","endLine":213,"endColumn":33},{"ruleId":"138","severity":1,"message":"139","line":215,"column":37,"nodeType":"140","messageId":"141","endLine":215,"endColumn":39},{"ruleId":"138","severity":1,"message":"139","line":218,"column":37,"nodeType":"140","messageId":"141","endLine":218,"endColumn":39},{"ruleId":"138","severity":1,"message":"139","line":221,"column":37,"nodeType":"140","messageId":"141","endLine":221,"endColumn":39},{"ruleId":"138","severity":1,"message":"139","line":224,"column":37,"nodeType":"140","messageId":"141","endLine":224,"endColumn":39},{"ruleId":"142","severity":1,"message":"143","line":241,"column":21,"nodeType":"144","endLine":241,"endColumn":38},{"ruleId":"145","severity":1,"message":"146","line":271,"column":21,"nodeType":"144","endLine":271,"endColumn":101},{"ruleId":"147","severity":1,"message":"148","line":44,"column":12,"nodeType":"149","messageId":"150","endLine":44,"endColumn":26},{"ruleId":"147","severity":1,"message":"151","line":45,"column":12,"nodeType":"149","messageId":"150","endLine":45,"endColumn":27},{"ruleId":"134","severity":1,"message":"152","line":54,"column":7,"nodeType":"136","endLine":54,"endColumn":9,"suggestions":"153"},{"ruleId":"138","severity":1,"message":"139","line":66,"column":43,"nodeType":"140","messageId":"141","endLine":66,"endColumn":45},{"ruleId":"147","severity":1,"message":"154","line":10,"column":10,"nodeType":"149","messageId":"150","endLine":10,"endColumn":17},{"ruleId":"147","severity":1,"message":"155","line":11,"column":10,"nodeType":"149","messageId":"150","endLine":11,"endColumn":15},{"ruleId":"147","severity":1,"message":"156","line":22,"column":10,"nodeType":"149","messageId":"150","endLine":22,"endColumn":26},{"ruleId":"147","severity":1,"message":"157","line":22,"column":28,"nodeType":"149","messageId":"150","endLine":22,"endColumn":47},{"ruleId":"134","severity":1,"message":"158","line":34,"column":5,"nodeType":"136","endLine":34,"endColumn":7,"suggestions":"159"},{"ruleId":"160","severity":1,"message":"161","line":76,"column":36,"nodeType":"162","messageId":"163","endLine":76,"endColumn":37,"suggestions":"164"},{"ruleId":"138","severity":1,"message":"139","line":158,"column":27,"nodeType":"140","messageId":"141","endLine":158,"endColumn":29},{"ruleId":"138","severity":1,"message":"165","line":244,"column":15,"nodeType":"140","messageId":"141","endLine":244,"endColumn":17},{"ruleId":"138","severity":1,"message":"165","line":246,"column":25,"nodeType":"140","messageId":"141","endLine":246,"endColumn":27},{"ruleId":"138","severity":1,"message":"165","line":251,"column":55,"nodeType":"140","messageId":"141","endLine":251,"endColumn":57},{"ruleId":"138","severity":1,"message":"165","line":254,"column":68,"nodeType":"140","messageId":"141","endLine":254,"endColumn":70},{"ruleId":"138","severity":1,"message":"165","line":282,"column":34,"nodeType":"140","messageId":"141","endLine":282,"endColumn":36},{"ruleId":"138","severity":1,"message":"165","line":303,"column":69,"nodeType":"140","messageId":"141","endLine":303,"endColumn":71},{"ruleId":"138","severity":1,"message":"165","line":306,"column":78,"nodeType":"140","messageId":"141","endLine":306,"endColumn":80},{"ruleId":"138","severity":1,"message":"165","line":339,"column":15,"nodeType":"140","messageId":"141","endLine":339,"endColumn":17},{"ruleId":"138","severity":1,"message":"165","line":339,"column":48,"nodeType":"140","messageId":"141","endLine":339,"endColumn":50},{"ruleId":"138","severity":1,"message":"165","line":343,"column":23,"nodeType":"140","messageId":"141","endLine":343,"endColumn":25},{"ruleId":"138","severity":1,"message":"165","line":357,"column":24,"nodeType":"140","messageId":"141","endLine":357,"endColumn":26},{"ruleId":"138","severity":1,"message":"165","line":388,"column":15,"nodeType":"140","messageId":"141","endLine":388,"endColumn":17},{"ruleId":"138","severity":1,"message":"165","line":444,"column":30,"nodeType":"140","messageId":"141","endLine":444,"endColumn":32},{"ruleId":"138","severity":1,"message":"139","line":97,"column":13,"nodeType":"140","messageId":"141","endLine":97,"endColumn":15},{"ruleId":"138","severity":1,"message":"139","line":180,"column":27,"nodeType":"140","messageId":"141","endLine":180,"endColumn":29},{"ruleId":"142","severity":1,"message":"143","line":201,"column":25,"nodeType":"144","endLine":201,"endColumn":42},{"ruleId":"145","severity":1,"message":"146","line":230,"column":115,"nodeType":"144","endLine":230,"endColumn":158},{"ruleId":"145","severity":1,"message":"146","line":230,"column":169,"nodeType":"144","endLine":230,"endColumn":214},{"ruleId":"145","severity":1,"message":"146","line":230,"column":234,"nodeType":"144","endLine":230,"endColumn":283},{"ruleId":"147","severity":1,"message":"166","line":4,"column":8,"nodeType":"149","messageId":"150","endLine":4,"endColumn":14},{"ruleId":"134","severity":1,"message":"167","line":16,"column":5,"nodeType":"136","endLine":16,"endColumn":7,"suggestions":"168"},{"ruleId":"130","replacedBy":"131"},{"ruleId":"132","replacedBy":"133"},{"ruleId":"134","severity":1,"message":"169","line":20,"column":7,"nodeType":"136","endLine":20,"endColumn":9,"suggestions":"170"},{"ruleId":"147","severity":1,"message":"171","line":1,"column":10,"nodeType":"149","messageId":"150","endLine":1,"endColumn":18},{"ruleId":"130","replacedBy":"172"},{"ruleId":"132","replacedBy":"173"},"no-native-reassign",["174"],"no-negated-in-lhs",["175"],"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'getTLog'. Either include it or remove the dependency array.","ArrayExpression",["176"],"eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","jsx-a11y/anchor-is-valid","The href attribute requires a valid value to be accessible. Provide a valid, navigable address as the href value. If you cannot provide a valid href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","@typescript-eslint/no-unused-vars","'transactionLog' is assigned a value but never used.","Identifier","unusedVar","'currentUserData' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'loadDetails'. Either include it or remove the dependency array.",["177"],"'Spinner' is defined but never used.","'IUser' is defined but never used.","'providedPassword' is assigned a value but never used.","'setProvidedPassword' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'currentUser.photoURL', 'getUserData', and 'triggerPictureInput'. Either include them or remove the dependency array.",["178"],"no-useless-escape","Unnecessary escape character: \\..","Literal","unnecessaryEscape",["179","180"],"Expected '!==' and instead saw '!='.","'moment' is defined but never used.","React Hook useEffect has a missing dependency: 'getUserAccounts'. Either include it or remove the dependency array.",["181"],"React Hook useEffect has a missing dependency: 'currentUser.photoURL'. Either include it or remove the dependency array.",["182"],"'useState' is defined but never used.",["174"],["175"],"no-global-assign","no-unsafe-negation",{"desc":"183","fix":"184"},{"desc":"185","fix":"186"},{"desc":"187","fix":"188"},{"messageId":"189","fix":"190","desc":"191"},{"messageId":"192","fix":"193","desc":"194"},{"desc":"195","fix":"196"},{"desc":"197","fix":"198"},"Update the dependencies array to be: [getTLog]",{"range":"199","text":"200"},"Update the dependencies array to be: [loadDetails]",{"range":"201","text":"202"},"Update the dependencies array to be: [currentUser.photoURL, getUserData, triggerPictureInput]",{"range":"203","text":"204"},"removeEscape",{"range":"205","text":"206"},"Remove the `\\`. This maintains the current functionality.","escapeBackslash",{"range":"207","text":"208"},"Replace the `\\` with `\\\\` to include the actual backslash character.","Update the dependencies array to be: [getUserAccounts]",{"range":"209","text":"210"},"Update the dependencies array to be: [currentUser.photoURL]",{"range":"211","text":"212"},[500,502],"[getTLog]",[1529,1531],"[loadDetails]",[1295,1297],"[currentUser.photoURL, getUserData, triggerPictureInput]",[2579,2580],"",[2579,2579],"\\",[503,505],"[getUserAccounts]",[689,691],"[currentUser.photoURL]"]